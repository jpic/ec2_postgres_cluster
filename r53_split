#!/usr/bin/env python

# Copyright 2014 William H. St. Clair
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import boto.route53

import time

def create_or_update(zone, hostname, ip, record=None):
    status = None
    if record is None:
        status = zone.add_record('A', hostname, ip)
    elif ip not in record.resource_records:
        status = zone.update_record(record, ip)

    if status is None:
        return False

    while status.update() == 'PENDING':
        time.sleep(1)

    assert status.status == 'INSYNC'
    return True

def delete(zone, record):
    if record is None:
        return False

    status = zone.delete_record(record)
    while status.update() == 'PENDING':
        time.sleep(1)

    assert status.status == 'INSYNC'
    return True

def find_record(zone, hostname):
    record = None
    for r in zone.get_records():
        if r.name == hostname:
            record = r
    return record


def main():
    module = AnsibleModule(
        argument_spec=dict(
            private_ip=dict(),
            public_ip=dict(),
            zone=dict(),
            hostname=dict(),
            state=dict(default='present', choices=['absent', 'present'])
        )
    )

    private_ip = module.params['private_ip']
    public_ip = module.params['public_ip']
    zone = module.params['zone']
    hostname = module.params['hostname']
    state = module.params['state']

    r53 = boto.route53.connect_to_region('us-east-1')

    public_zone = None
    private_zone = None

    for z in r53.get_zones():
        if z.name == zone:
            is_private = z.config['PrivateZone']
            if is_private == 'false':
                public_zone = z
            elif is_private == 'true':
                private_zone = z


    assert public_zone is not None and private_zone is not None

    public_record = public_zone.find_records(hostname, 'A', 1)
    private_record = private_zone.find_records(hostname, 'A', 1)

    if state == 'absent':
        changed = (
            delete(public_zone, public_record) or
            delete(private_zone, private_record))

    elif state == 'present':
        changed = (
            create_or_update(
                public_zone, hostname, public_ip, public_record) or
            create_or_update(
                private_zone, hostname, private_ip, private_record))

    module.exit_json(changed=changed)

# import module snippets
from ansible.module_utils.basic import *
main()
